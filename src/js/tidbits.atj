
=============================================================================================================================================
tcfview.onDataLoad = function(data, args) {
	//preserve justification cycle attr
	if(data.newphasetwo && data.newphasetwo.length && (!data.justification || !data.justification.length)
			&& tcadata && tcadata.justification && tcadata.justification.length) {
		data.justification = attr_write("justification", tcadata.justification, {savetcf: false});
	}
}

=============================================================================================================================================
return [inval.replace(wfrule.ifregex," (" + myName + ": Check to see if the subject code has multiple entries in the subject/campus table)")];
return [inval.replace(wfrule.regex," (" + myName + ": Check to see if the subject code has multiple entries in the subject/campus table)")];

=============================================================================================================================================
print_debug('\ninval =' + inval + '\nwfrule =' + wfrule.toSource() + '\nargs =' + args.toSource() + '\n'  );
print_debug('args.context = ' + args.context.toString() + '\n');

=============================================================================================================================================
return [inval.replace(wfrule.regex,'')];
return [inval.replace(wfrule.ifregex,'')];

=============================================================================================================================================
// replace all instances of a char in a string
myString.replace(/,/g , ", ");

=============================================================================================================================================
//Loop through array using iterator
for (var i=0,  tot=myArray.length; i < tot; i++) {
  console.log(myArray[i]);
}

//Loop through array using forEach
resultSet.forEach(function(text) {
	print_debug('text = ' + text.toSource() + '\n');
});

// Loop through the variable list with break
checkFieldsStr.split(',').some(function (field) {
	Dump('field',field)
	if (field === 'XXX') {
		return true;
	}
});
-or-
// Loop through the variable list with break
checkFieldsStr.split(',').every(function (field) {
	Dump('field',field)
	if (field === 'XXX') {
		return false;
	}
});


=============================================================================================================================================
//Loop through an hash
for (var key in hash) {
	Dump("hash[" + key + "]",hash[key].toSource())
}

=============================================================================================================================================
//getTCFValue
var tcfValue=getTCFValue("someVariable");
var tcfValue=getTCFValue("someVariable", { delimiter: "\n", retarray: true });
var tcaValue=getTCFValue("someVariable", { data: tcadata });
var tcaValue=getTCFValue("someVariable", { delimiter: "\n", retarray: true, data: tcadata });

// return a multi line field connected (e.g. htmltext) with blanks
var tcfValue=getTCFValue(key, { multiline: true });

//if definition is <variable>:id|<attr1>|<attr2>|<attr3>
var competency=getTCFValue("<variable>.<attr1>", { delimiter: "\n", retarray: true });

both tcf and tca data
var values=getTCFValue("someVariable", { delimiter: "\n", retarray: true });
values=RemoveDupes(proposalCols.concat(getTCFValue("someVariable", { delimiter: "\n", retarray: true , data: tcadata })));

=============================================================================================================================================
CheckChanged
wfrules:isMinorChange|function|CheckChanged|mode:only fields:<comma seperatered list of field>; // Minor change
-or-
<callName>_wfCheckChangedFields: <comma seperatered list of field>
wfrules:isMinorChange|function|CheckChanged|mode:only

=============================================================================================================================================
//Parse an option list 
var tmpArray1=options.split(" ");
tmpArray1.forEach(function(text) {
	print_debug('text = ' + text.toSource() + '\n');
	tmpArray2=text.split(':');
	switch(tmpArray2[0].toLowerCase()) {
	    case "mode":
	    	mode=tmpArray2[1];
	        break;
	    case "checkfields":
	        checkFieldsStr=tmpArray2[1];
	        break;
	    case "notmode":
	    	notMode=tmpArray2[1];
	        break;
	    default:
	        unknownOpts=unknownOpts + text;
	}
});

=============================================================================================================================================
Regular expressions
=============================================================================================================================================
^[0-4]\d{2}[A-Z]{0,1}$		--> 3 digits starting with a 0-4 followed by two digits followed by an optional cap char

in wfrules
	wfrules:isROTC|iffieldmatch|subject.code|value=/^(AS%7CNS%7CMS)$/; //Proposal is for ROTC subject

//Regular Expression testing
var courseNumber=getTCFValue('course_number');
var regex=/^[0-3]\d{2}\w{0,1}$/i 						//Note that this is not a string, there are no quotes arround the value
if (regex.test(courseNumber)) {
	Here(1);
}

var uGradRegEx=/^[0-4]\d{3}[A-Za-z]*$/;
var gradRegEx=/^[5-9]\d{3}[A-Za-z]*$/;

// Undergraduate
if (courseNumber != "" ) {
	if (uGradRegEx.test(courseNumber)) {

	}
	// Graduate
	if (gradRegEx.test(courseNumber)) {

	}
}

=============================================================================================================================================
// Function to sort array of objects by dept field
function compareDepts(a,b) {
  if (a.dept < b.dept)
     return -1;
  if (a.dept > b.dept)
    return 1;
  return 0;
}


=============================================================================================================================================
// or'ED REGULAR EXPRESSIONS
wfrules:useprog|iffieldmatch|department.code|value=/EDUC%7CIDPC%7CIDPE%7CIDPA%7CAE%7CAS/
wfrules:usedept|iffieldmatch|department.code|value!=/EDUC%7CIDPC%7CIDPE%7CIDPA%7CAE%7CAS/

wfrules:isminorchange|iffieldmatch|editprog_loi_select.groupname|value=/^LON.*/
wfrules:ismajorchange|iffieldmatch|editprog_loi_select.groupname|value=/^LOI.*/


=============================================================================================================================================
wfrules:displaytcfvalues|function|DisplayTCFValues|
//Display proposal values of interest
wffuncs.DisplayTCFValues = function(inval, wfrule, args) {
	var subj=''; var dept=''; var col=''; var acadLevel=''; var courseNum;
	if ( typeof tcfdata.subject != 'undefined' )
		var subj=tcfdata.subject[0].code;
	if ( typeof tcfdata.college != 'undefined' )
		var col=tcfdata.college[0].code;
	if ( typeof tcfdata.department != 'undefined' )
		var dept=tcfdata.department[0].code;
	if ( typeof tcfdata.acad_level != 'undefined' )
		var acadLevel=tcfdata.acad_level[0].code;
	if ( typeof tcfdata.course_number != 'undefined' )
		var courseNum=tcfdata.course_number;

	print_doc('&nbsp;&nbsp;<strong>TCF Data:</strong><ul>');
	if (col != '') 			print_doc('<li> college = ' + col + '</li>');
	if (dept != '') 		print_doc('<li> department = ' + dept + '</li>');
	if (subj != '') 		print_doc('<li> subject = ' + subj + '</li>');
	if (courseNum != '') 	print_doc('<li> courseNum = ' + courseNum + '</li>');
	if (acadLevel != '') 	print_doc('<li> acadLevel = ' + acadLevel + '</li>');
	print_doc('</ul><hr>');

	return false
}

=============================================================================================================================================
// Create an object, add element to object array
var ref={};
var refsArray=[];

ref.data=data;
ref.format='dept';

refsArray.push(ref);

if (haveDebug) {
	Debug('\n\trefsArray from form fields:');
	for (var key in refsArray) { Dump('\t\trefsArray[' + key + ']',refsArray[key].toSource()); }
	Debug('');
}

=============================================================================================================================================
// Get current directory
var wfPathbase=tcfdata.pagename[0].replace(/^\/([^\/]*)\/.*/, "/$1/");
prtStr="=== Loading ..." + wfPathbase + "/custom-workflow.atj, proposal mode is " + wfProposalMode

=============================================================================================================================================
// set changedFields to cycleattrs, loop through and push to avoid change cycleaddres since it is passed by reference
var allowChangedFields=[];
tcfdata.cycleattrs.forEach(function(field) { allowChangedFields.push(field) });  // jshint ignore:line
allowChangedFields.push('<variableName>');

if (CheckChanged(diffdata,allowChangedFields,'any',true)) {
}

=============================================================================================================================================
// process sql results
	var sqlParms=[]
	sqlParms.push(????);
	sqlParms.push(????);
	// Run Query
	var sqlStmt="SELECT DISTINCT path,dept FROM courseref WHERE code = ? AND dept <> ? AND dept <> ''" + pathClause;
	var resultSet=dbquery(tcfdata.dbname[0], sqlStmt,sqlParms);
	if(resultSet.length == 0) {
		if (haveDebug) { Debug("\t *** No data returned from sql query: \n\t" +  sql); }
		return false;
	} else {
		resultSet.forEach(function(result) {
		});
	}
// 04-03-2017 @ 10.54.45 - dscudiero - Add new info for regex

//=================================================================================================
// Set the department code by looking up the 'descrshort' field in the 'acad_org_tbl' table
//=================================================================================================
// 10-??-16 - dgs - Initial coding -- csusb
//=================================================================================================
wffuncs.MapCode = function(inval, wfrule, args) {
	var myName=wfrule.attrname; wfDebug(1,"\n*** In " + myName + " called as '" + args.context + "/" + wfrule.searchfor + "', Step: '" + inval + "' ***");

	var retVal="";
	var reqType=wfrule.searchfor.toLowerCase();
	var lookUp='department'
	if (reqType.indexOf("col") >= 0) lookUp='college';

	// Main
	var sqlStmt="select descrshort from acad_org_tbl where acad_org=?";
	var sqlParms=[getTCFValue(lookUp)];
	var resultSet=dbquery("cimcourses",sqlStmt,sqlParms);
	if (resultSet.length) {
		wfDump(1,[lookUp+";"+sqlParms[0],"resultSet;"+resultSet.toSource()]);
		retVal=resultSet[0].descrshort;
	} else {
		retVal=sqlParms[0];
	}

	// Return results
	wfDebug(1,"\t*** Returning value: " + retVal)
	return [inval.replace(wfrule.regex,retVal)]

} //MapCode

//=================================================================================================
// Set the department code by looking up the 'descrshort' field in the 'acad_org_tbl' table
//=================================================================================================
// 10-??-16 - dgs - Initial coding -- csusb
//=================================================================================================
WfDataMapper = function(type,data) {
	var myName="WfDataMapper"; wfDebug(1,"\n\t\t*** In " + myName + " ***");
	wfDump(4,["\t\ttype;"+type,"\t\tdata;"+data])

	var retVal="";

	// Main
	var sqlStmt="select descrshort from acad_org_tbl where acad_org=?";
	var sqlParms=[data];
	var resultSet=dbquery("cimcourses",sqlStmt,sqlParms);
	if (resultSet.length) {
		wfDump(4,["\t\tresultSet;"+resultSet.toSource()]);
		retVal=resultSet[0].descrshort;
	} else {
		retVal=data;
	}

	// Return results
	wfDebug(3,"\t\t*** Data '" + data + "' mapped to: '" + retVal + "'")
	return retVal;

} //WfDataMapper// 


//======================================================================================================================
// Compare two tokens to see if they are equal, takes any kind of input (.e. can be objects)
// Returns true or false
//======================================================================================================================
function wfDeepCompare(a, b) {
	// Checking if a and b are strictly equal
	if (a === b) return true;
dump("a",a.toSource())
dump("b",b.toSource())
Here("DC0")
  	// If either of the two is not an object, and they did not pass the last test, then they cannot be the same.
 	if (a == null || typeof a != "object" ||
    	b == null || typeof b != "object")
    return false;

Here("DC1")
	var propsInA = 0, propsInB = 0;
	// OK we have two objects
	// Get the number of properties in object a
	for (var prop in a) {}
		propsInA += 1;

dump("propsInA",propsInA)
	// Loop through the properties in object b and see if they are the same, if there is a different number of properties, then the objects are different
	for (var prop in b) {
		propsInB += 1;
		// Compare properties
		if (!(prop in a) || !wfDeepCompare(a[prop], b[prop]))
      		return false;
  	}
dump("propsInB",propsInB)

Here("DC2")
  	// If we got here and the number of properties are the same then the objects are the same
  	return propsInA == propsInB;
} //wfDeepCompare



attributes=["slo_competencies_subscreen","slo_outcome_text_subscreen","slo_assessment_text_subscreen"];
attributes.forEach(function(attr) {
	var tcfValue=getTCFValue("student_learning_outcomes_subscreen."+attr, { delimiter: "\n", retarray: true });
	var tcaValue=getTCFValue("student_learning_outcomes_subscreen."+attr, { delimiter: "\n", retarray: true, data: tcadata });
	if (tcfValue.length != tcaValue.length)
		return "SLO Revision Only";
	for (var i=0,  tot=tcfValue.length; i < tot; i++) {
		if (tcfValue[i] != tcaValue[i]) {
			break
			return "SLO Revision Only";
		}
	}
});

//=================================================================================================
// Check-in log
// 05-09-2017 @ 13.27.42 - dscudiero - add mapping examples
// 05-11-2017 @ 14.54.54 - dscudiero - add example of parsing options
// 05-15-2017 @ 10.25.26 - dscudiero - update sqlquery exmample


// 05-17-2017 @ 07.10.21 - dscudiero - General syncing of dev to prod
// 06-06-2017 @ 08.57.51 - dscudiero - General syncing of dev to prod
// 07-19-2017 @ 14.06.25 - dscudiero - General syncing of dev to prod
// 07-20-2017 @ 08.56.18 - dscudiero - General syncing of dev to prod
// 07-25-2017 @ 10.55.51 - dscudiero - Updated regex section
// 07-26-2017 @ 09.13.19 - dscudiero - Added examples of 'some' and 'every' loops
// 08-08-2017 @ 10.53.48 - dscudiero - Consolidated regex stuff
// 08-08-2017 @ 16.31.29 - dscudiero - misc updates
// 08-22-2017 @ 14.16.21 - dscudiero - Add examples of getTCFValue calls
// 08-24-2017 @ 14.19.28 - dscudiero - Added get tca data example
// 10-04-2017 @ 07.47.38 - dscudiero - General syncing of dev to prod
// 10-12-2017 @ 14.21.39 - dscudiero - Add example of checkchanges call
// 11-02-2017 @ 12.38.20 - dscudiero - add example of relace all instances of a char in string
// 12-05-2017 @ 13.18.46 - dscudiero - Cosmetic/minor change
