//=================================================================================================
//wfrules:<somePrefixTerm>Depts|function|Crosslisted|
//wfrules:<somePrefixTerm>Schools|function|Crosslisted|
//wfrules:<somePrefixTerm>Colleges|function|Crosslisted|
//=================================================================================================
// Add cross listed course departments / colleges /schools to the workflow
// Only uses data from the form
// wfrule definition defines what data to be include in workflow:
// 	if the lower(rule name) includes 'dept' then substitute the department value into step
// 	if the lower(rule name) includes 'school' then substitute the school value into step
// 	if the lower(rule name) includes 'college' then substitute the college value into step
// for each crosslisted department.
// returned data is sorted by code and duplicates are removed.
// 
// SETUP:  --- see 'switches/options' below
// 	1) crosslistedData = the tcfdata variable that contains the crosslisted data from the form
// 	2) crosslistedDataIsCourseNumber = true if what is contained above is a full course number (i.e. ENG 101)
// 									   false if it is really a department code
//  3) includeEcoSystemData = true to include related departments from the eco system (currently not implemented)
//                            false to not include ecosystem data
// 
//=================================================================================================
// 09/17/15 - dgs - initial codeing for wcupa & illinois
//=================================================================================================
wffuncs.Crosslisted = function(inval, wfrule, args) {
	var myName=wfrule.attrname; var haveDebug=false; if (typeof(Dump) == "function" && typeof(Debug) == "function") haveDebug=true;
	if (haveDebug) { Debug('\n*** In '+ myName + " called as '" + wfrule.searchfor + "' ***"); }
	//if (haveDebug) { Dump('\targs',args.toSource()); Dump('\tinval',inval); Dump('\twfrule',wfrule.toSource()); Dump('\targs',args.toSource()); }

	// Determin mode (dept / college) based on the mapped name
		var reqType=wfrule.searchfor.toLowerCase()

	//switches/options
		var crosslistedData = tcfdata.crosslisted;
		var crosslistedDataIsCourseNumber = true;
		var includeEcoSystemData = false;

	//Try block encapsulated main function
	try { 
		// initial checks
			if (args && args.context && args.context != "wfrule")
				throw 'Failed rule type check';
			if (!tcfdata.code || !tcfdata.code.length)
				throw 'Failed code not null check';
			if (!tcfdata.department || !tcfdata.department.length)
				throw 'Failed department not null check';
			if (!tcfdata.college || !tcfdata.college.length)
				throw 'Failed college not null check';

			var parentCode=tcfdata.code[0];
			var parentDept=tcfdata.department[0].code;
			var parentCollege=tcfdata.college[0].code;
			if (haveDebug) { Dump('\tparentCode',parentCode); Dump('\tparentDept',parentDept); Dump('\tparentCollege',parentCollege); }

			if (reqType.indexOf('school') > 0) {
				// Lookup parent school
				var parentSchool='';
				sql='SELECT school FROM cimlookup WHERE department=? and college=?';
				sqlParms=[parentDept,parentCollege];
				rows=dbquery(tcfdata.dbname[0],sql,sqlParms);
				if (rows.length >0 ) {
					parentSchool=rows[0].school;
				}
				if (haveDebug) { Dump('\tparentschool',parentSchool); }
			}

		var refsArray = new Array();
		//Check for any cross references data for this course in the crossref table (eco system)
			if (includeEcoSystemData) {

			}

		// Check for crosslisted course data as listed on the form
			if (crosslistedData && crosslistedData.length > 0) {
				if (haveDebug) { Debug('\t' + crosslistedData.length + ' cross references listed on the form:');}
				crosslistedData.forEach(function(text) {
					if (haveDebug) { Dump('\t\tcrosslistedData',text.code); }				
					if (crosslistedDataIsCourseNumber) { refCode = text.code.split(" ")[0]; Dump('\t\trefSubj',refCode); }
					refsArray.push(refCode);					
				});
			}

		// Look up the department, school, & college codes for the course code from the cimlookup table
			var retArray=new Array(), depts=[], cols=[], schools=[];
			refsArray.forEach(function(text) {
				if (haveDebug) { Dump('\trefsArray element',text); }

				var selectSchool=''
				if (reqType.indexOf('school') > 0) { selectSchool=',school' }
				var sql='SELECT department,college' + selectSchool + ' FROM cimlookup WHERE subject=? and department <> ?';
				var sqlParms=[text,parentDept];
				var resultSet=dbquery(tcfdata.dbname[0],sql,sqlParms);
				if (resultSet.length > 0 ) {
					resultSet.forEach(function(row) {
						if (haveDebug) { Debug("\t\tFrom lookup: dept = '" + row.department + "', col = '" + row.college + "' school = '" + row.school + "'"); }
						if (row.department) { depts.push(row.department); }
						if (row.college) { cols.push(row.college); }
						if (reqType.indexOf('school') > 0) {
							if (row.school) {
								schools.push(row.school); 
							} else {
								if (!row.college) {
									var sql='SELECT school FROM cimlookup WHERE college=? and school <> ?';
									var sqlParms=[row.college];
									var resultSet=dbquery(tcfdata.dbname[0],sql,sqlParms);
									if (resultSet.length > 0 ) {
										Debug('\t\tSchool from lookup: ' + resultSet[0].school); 
										school.push(resultSet[0].school)
									}
								}
							}
						}
					});	//resultSet
				} //resultSet 
			}); //retArray

		// Remove duplicates
			if (haveDebug) { Debug("\t\tArray member counts before dumps removal: depts = " + depts.length + ", cols = " + cols.length + ", schools = " + schools.length); }
			depts=RemoveDupes(depts,parentDept);
			cols=RemoveDupes(cols,parentCollege);
			schools=RemoveDupes(schools,parentSchool);
			if (haveDebug) { Debug("\t\tArray member counts aftern dups removal: depts = " + depts.length + ", cols = " + cols.length + ", schools = " + schools.length); }

		// Generate output steps
			//if (EnvIs('dev')) retArray.push('*** START of ' + wfrule.searchfor.toUpperCase() + ' ***');

			// Process departments, output role based on reqType
				if (reqType.indexOf('dept') > 0) {
					depts.forEach(function(dept) {
						retArray.push(inval.replace(wfrule.regex,dept).trim());
					});
				}
			// Process schools, output role based on reqType
				if (reqType.indexOf('school') > 0) {
					schools.forEach(function(school) {
						retArray.push(inval.replace(wfrule.regex,school).trim());
					});
				}
			// Process colleges, output role based on reqType
				if (reqType.indexOf('college') > 0) {
					cols.forEach(function(col) {
						retArray.push(inval.replace(wfrule.regex,col).trim());
					});
				}

			//if (EnvIs('dev')) retArray.push('*** END of ' + wfrule.searchfor.toUpperCase() + ' ***');

		if (haveDebug) { retArray.forEach(function(step) { Dump('\tReturning step: ',step) }); }
		return retArray;
	}

	//Catch block for errors thrown in above try block
	catch(err) { if (haveDebug) { Debug(err); } else { throw err } return false; }

	// Should never get here
	return false;
} //Crosslisted
