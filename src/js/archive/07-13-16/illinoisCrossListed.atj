
//=================================================================================================
// these two may be repeated as needed, arrays are order dependant
// 		CrosslistedVar:<Form variable name 1>
// 		CrosslistedDataFormat:<code/dept/subj 1>
// 		CrosslistedVar:<Form variable name 2>
// 		CrosslistedDataFormat:<code/dept/subj 2>
//
// global switches/flags
// 		CrosslistedCheckChanged:<Yes/No>
// 		CrosslistedIncludeEcoSystemData:<Yes/No>
//
// rule definitiona
// 		wfrules:<somePrefixTerm>Depts|function|Crosslisted|
// 		wfrules:<somePrefixTerm>Schools|function|Crosslisted|
// 		wfrules:<somePrefixTerm>Colleges|function|Crosslisted|

// sets of steps as needed, one for each definition above
//		CrosslistedDeptsSteps:Dept Courses Committee fyi optional
// 		CrosslistedDeptsSteps:Dept Courses Committee Chair fyi optional
// 		CrosslistedDeptsSteps:Dept Head optional
//	
// 		CrosslistedCollegeSteps:Col Curriculum Committee fyi optional
// 		CrosslistedCollegeSteps:Col Curriculum Committee Chair fyi optional
//		CrosslistedCollegeSteps:Col Dean optional
//
// e.g.
// wfrules:RelatedDepts|function|Crosslisted|
// CrosslistedVar:cl_subject
// CrosslistedDataFormat:code
// CrosslistedVar:other_depts
// CrosslistedDataFormat:dept
// CrosslistedDeptsSteps:Dept Chair fyi optional
//
//=================================================================================================
// Add cross listed course departments / colleges /schools to the workflow
// Only uses data from the form
// wfrule definition defines what data to be include in workflow:
// 	if the lower(rule name) includes 'dept' then substitute the department value into step
// 	if the lower(rule name) includes 'school' then substitute the school value into step
// 	if the lower(rule name) includes 'college' then substitute the college value into step
// for each crosslisted department.
// returned data is sorted by code and duplicates are removed.
//
// SETUP:  --- SEE 'SWITCHES' BELOW
// 1) CrosslistedVar = The name of the form variable that contains the crosslisted data.
// 2) CrosslistedIncludeEcoSystemData = Incorporate the data from the eco system into the output.
//		Value = true or false.
// 3) CrosslistedCheckChanged = Check to see if the primary Dept or Subject values have change, if
//		yes then include in output.
//
//=================================================================================================
// 09/17/15 - dgs - initial codeing for wcupa & illinois
// 10/30/15 - dgs - Updated to also include a crosslisted dept if the department was removed from
//                  the proposal.  See switches/options on how to activate
// 11/03/15 - dgs - 1) If deartment code changes, add origional department to the crosslisted list
//                  2) Refactor to group roles by department/school/college
//                  3) Add more fields to config file to supprt #2 above
//                  4) Do variable substitution on the step
//                  5) If step in the workflow has attributes (e.g. fyi) then use the step, otherwise
//                     Use the step data in the config rile
//                  6) If the call name ends in 'notify' the modify the steps to include 'fyiall'
// 11/19/15 - dgs - 1) Refactored to only do one 'catagory' at a time
//									2) Get crosslisted variable name and pull data indirectly
//									3) Added if Dept or Subj changed
//=================================================================================================
wffuncs.Crosslisted = function(inval, wfrule, args) {
	var myName=wfrule.attrname; var haveDebug=false; if (typeof(Dump) == "function" && typeof(Debug) == "function") haveDebug=true;
	if (haveDebug) { Debug('\n*** In '+ myName + " called as '" + wfrule.searchfor + "' ***"); }
	if (haveDebug) { Dump('\tFull Step text',inval); }
	//if (haveDebug) { Dump('\targs',args.toSource()); Dump('\tinval',inval); Dump('\twfrule',wfrule.toSource()); Dump('\targs',args.toSource()); }

	// Determin mode (dept / college) based on the mapped name
		var notifyMode=false;
		var reqType=wfrule.searchfor.toLowerCase();
		if (reqType.substr(reqType.length - 'notify'.length) == 'notify') {
			notifyMode=true;
		}
		if (haveDebug) { Dump('\treqType',reqType); Dump('\tnotifyMode',notifyMode);}

	//Set switches from tcfdata in config file
		if (haveDebug) { Dump('\ttcfdata.CrosslistedVar',tcfdata.CrosslistedVar); }
		if (haveDebug) { Dump('\ttcfdata.CrosslistedCheckChanged',tcfdata.CrosslistedCheckChanged); }

		var crosslistedTcfData=[];
		crosslistedTcfData=eval('tcfdata.' + tcfdata.CrosslistedVar); // jshint ignore:line
		if (haveDebug) { Dump('\tcrosslistedTcfData',crosslistedTcfData.toSource()); }

		var crosslistedTcaData=[];
		if (tcadata.crosslisted && tcadata.crosslisted.length > 0)
			crosslistedTcaData=tcadata.crosslisted;
		if (haveDebug) { Dump('\tcrosslistedTcaData',crosslistedTcaData.toSource()); }

		var crosslistedDataFormat='code';
		if (tcfdata.CrosslistedDataFormat && tcfdata.CrosslistedDataFormat.length > 0)
			crosslistedDataFormat=tcfdata.CrosslistedDataFormat.toLowerCase();
		if (haveDebug) { Dump('\tcrosslistedDataFormat',crosslistedDataFormat); }

		var includeEcoSystemData=false;
		if (tcfdata.CrosslistedIncludeEcoSystemData && tcfdata.CrosslistedIncludeEcoSystemData.length > 0)
			includeEcoSystemData=tcfdata.CrosslistedIncludeEcoSystemData;
		if (haveDebug) { Dump('\tincludeEcoSystemData',includeEcoSystemData); Debug(''); }

	//Try block encapsulated main function
	try {
		// initial checks
			if (args && args.context && args.context != "wfrule")
				throw 'Failed rule type check';
			if (!tcfdata.code || !tcfdata.code.length)
				throw 'Failed code not null check';
			if (!tcfdata.subject || !tcfdata.subject.length)
				throw 'Failed subject not null check';
			if (!tcfdata.department || !tcfdata.department.length)
				throw 'Failed department not null check';
			if (!tcfdata.college || !tcfdata.college.length)
				throw 'Failed college not null check';

			var parentCode=tcfdata.code[0];
			var parentSubject=tcfdata.subject[0].code;
			var parentDepartment=tcfdata.department[0].code;
			var parentCollege=tcfdata.college[0].code;
			if (haveDebug) { Dump('\tparentCode',parentCode); Dump('\tparentSubject',parentSubject); Dump('\tparentDepartment',parentDepartment); Dump('\tparentCollege',parentCollege); }

			// If request type is school then lookup school code
			if (reqType.indexOf('school') > 0) {
				// Lookup parent school
				var parentSchool='';
				sql='SELECT school FROM cimlookup WHERE department=? and college=?';
				sqlParms=[parentDepartment,parentCollege];
				rows=dbquery(tcfdata.dbname[0],sql,sqlParms);
				if (rows.length >0 ) {
					parentSchool=rows[0].school;
				}
				if (haveDebug) { Dump('\tparentschool',parentSchool); }
			}

		//Check for any cross references data for this course in the crossref table (eco system)
			if (includeEcoSystemData) {
				//TODO
			}

		// Check for crosslisted course data as listed on the form

			if (haveDebug) { Debug('\n\t' + crosslistedTcfData.length + ' cross references listed on the form'); }
			// Force a copy of the crosslised data into the refsArray, create ah hash table
				var refsArray=[];
				var refsLookup={};
				crosslistedTcfData.forEach(function(data) {
					refsArray.push(data);
					refsLookup[data.toSource()]=refsArray.length-1;
				}); //tcfData

			// Scan the tca data and see if there are any elements not in the tcf data, i.e. it has been deleted
				if (crosslistedTcaData && crosslistedTcaData.length > 0) {
					if (haveDebug) { Debug('\t' + crosslistedTcaData.length + ' cross references listed from the tca file');}
					// Scan the tca data and see if it is already in the tcf data
						crosslistedTcaData.forEach(function(b) {
							if (refsLookup[b.toSource()] === undefined) {
								if (haveDebug) {Debug("\t\tAdding deleted code to refsArray: " + b.toSource());}
								refsArray.push(b);
							}
						}); //tcfData
				} //have tca data

			// Check to see if the subject code has change, if yes then include the origional subject code in the refsArray
				if (tcadata.subject && tcadata.subject.length > 0) {
							if (tcadata.subject[0].code != parentSubject) {
								if (haveDebug) { Debug('\tSubject code changed, adding origional (from tca): ' + tcadata.subject[0].code);}
								refsArray.push({code:tcadata.subject[0].code});
							}
				}
				// Check to see if the department code has change, if yes then include the origional subject code in the refsArray
					if (tcadata.department && tcadata.department.length > 0) {
								if (tcadata.department[0].code != parentDepartment) {
									if (haveDebug) { Debug('\tDepartment code changed, adding origional (from tca): ' + tcadata.department[0].code);}
									refsArray.push({department:tcadata.department[0].code});
								}
					}
			//if (haveDebug) { Dump('\t\trefsArray',refsArray.toSource()); }
			if (haveDebug) { Debug(''); }

		// Look up the department, school, & college codes for the course code from the cimlookup table
			var sql='', sqlSubj='', sqlDept='', searchStr='', steps=[];
			if (reqType.indexOf('depts') > 0) {
				sqlSubj='SELECT distinct department as token FROM cimlookup WHERE subject=? and department <> "' + parentDepartment +'"';
				sqlDept='SELECT distinct department as token FROM cimlookup WHERE department=? and department <> "' + parentDepartment +'"';
				searchStr='Dept';
				if (tcfdata.CrosslistedDeptsSteps && tcfdata.CrosslistedDeptsSteps.length > 0)
					steps=tcfdata.CrosslistedDeptsSteps;
			}
			if (reqType.indexOf('colleges') > 0) {
				sqlSubj='SELECT distinct college as token FROM cimlookup WHERE subject=? and college <> "' + parentCollege +'"';
				sqlDept='SELECT distinct college FROM cimlookup WHERE department=? and college <> "' + parentCollege +'"';
				searchStr='Col';
				if (tcfdata.CrosslistedCollegesSteps && tcfdata.CrosslistedCollegesSteps.length > 0)
					steps=tcfdata.CrosslistedCollegesSteps;
			}
			if (reqType.indexOf('schools') > 0) {
				sqlSubj='SELECT distinct school as token FROM cimlookup WHERE subject=? and school <> "' + parentSchool +'"';
				sqlDept='SELECT distinct school as token FROM cimlookup WHERE department=? and school <> "' + parentSchool +'"';
				searchStr='School';
				if (tcfdata.CrosslistedSchoolsSteps && tcfdata.CrosslistedSchoolsSteps.length > 0)
					steps=tcfdata.CrosslistedSchoolsSteps;
			}
			//if (haveDebug) { Dump('\tsql',sql); }

			// Loop through the reference elements
				var outTokens=[];
				refsArray.forEach(function(text) {
					if (haveDebug) { Dump('\trefs code',text.toSource()); }
					// See if we have a course code or just a department code
					if (typeof text.code !== "undefined") {
						var tempArray=text.code.split(' ');
						refSubj=''; refNum=''; refDept='';
						if (tempArray.length > 1) {
							refSubj=tempArray[0];
							refNum=tempArray[1];
							sqlParms=[refSubj];
						} else {
							sqlParms=[text.code];
						}
						sql=sqlSubj;
					} else if (typeof text.department !== "undefined") {
						sqlParms=[text.department];
						sql=sqlDept;
					}

					// Parse the result set string
						//if(haveDebug) { Dump('\t\tsql',sql); }
						var resultSet=dbquery(tcfdata.dbname[0],sql,sqlParms);
						if (resultSet.length > 0 ) {
							resultSet.forEach(function(row) {
								if (haveDebug) { Debug("\t\t '" + searchStr + "' from cimlookup: row = " + row.toSource() ); }
								if (reqType.indexOf('depts') > 0 && refSubj == 'MDIA' && refNum >= 500) {
									outTokens.push('ICR');
								} else {
									outTokens.push(row.token);
								}
							}); //resultSet loop
					} else {
						if (haveDebug) { Debug("\t\tNo data returned from cimlookup"); }
					} //#resultSet > 0
				}); //refsArray

			outTokens=RemoveDupes(outTokens);
			if (haveDebug) { Dump('\n\toutTokens',outTokens.toSource()); Dump('\tsearchStr',searchStr);}

		// Output the steps
			var retArray=[];
			if (EnvIs('dev')) retArray.push('*** START of ' + inval.toLowerCase().replace('optional','') + ' ***');
			outTokens.forEach(function(token) {
				if (token === '') return;
				if (inval == wfrule.searchfor) {
					steps.forEach(function(step) {
						step=step.replace(searchStr,token);
						if(notifyMode) {
							if (step.indexOf(' fyi') < 0) {
								step=step + ' fyiall';
							} else if (step.indexOf(' fyi') >= 0) {
								step=step.replace(' fyi',' fyiall');
							}
						}
						retArray.push(step.trim());
						Dump('\t\tReturning step: ',retArray[retArray.length-1]);
					});	//steps
				} else {
					Here(2);
					retArray.push(inval.replace(wfrule.regex,token).trim());
					Dump('\t\tReturning step: ',retArray[retArray.length-1]);
				}
			}); //outTokens
			if (EnvIs('dev')) retArray.push('*** END of ' + inval.toLowerCase().replace('optional','') + ' ***');

		return retArray;
	} //try

	//Catch block for errors thrown in above try block
	catch(err) { if (haveDebug) { Debug(err); } else { throw myName + ': ' + err; } return false; }

	// Should never get here
	return false;
}; //Crosslisted