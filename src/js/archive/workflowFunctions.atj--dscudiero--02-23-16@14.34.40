
//==================================================================================================
// Workflow functions for courseadmin
// Note: Expects the functions in workflowHelperFunctions.atj in this same directory to have been
// already imported.
//==================================================================================================
if (typeof workflowFunctionsLoaded == "undefined") {
	var host=getenv("HTTP_HOST").toUpperCase() ;
	if (host.indexOf('.DEV') > 0 || host.indexOf('-TEST.') > 0) {
		var workflowFunctionsLoaded=false;
		print_debug("*** Loading /courseadmin/workflowFunctions.atj ***\n");
	}
}

//==================================================================================================
// Helper function for RelatedDepts
// -- Add college data to the data object passed to workflow.getWorkflowPart since we have Col
//    determined workflow.
// 07-23-15 - dgs - Initial for colostate
//==================================================================================================
wffuncs.getWFData = function(data){
	// add the college data
	data.college = tcfdata.college;
	return data;
};


//==================================================================================================
// Get college, primarially needed for ROTC and KUMC Graduate Studies
// 02/27/2015 - dgs - new -- ku
//==================================================================================================
wffuncs.GetCollege = function(inval, wfrule, args) {
	var myName=wfrule.attrname;
	var haveDebug=false; var haveDump=false; if (typeof(Dump) == "function") haveDump=true; if (typeof(Debug) == "function") haveDebug=true;
	if (haveDebug) Debug('\n*** In ' + myName + ' ***');
	//if (haveDump)  { Dump('\tinval',inval); Dump('\twfrule',wfrule.toSource()); Dump('\targs',args.toSource()); }

	// Check environment, do we have enough data to run
	if (!tcfdata.college || !tcfdata.college.length)
		return false;
	var college=tcfdata.college[0].code;
	if (haveDebug) { Dump("\t college (1)",college); }

	// Main
	var retVal=college;

	//KUMC Graduate Studies ??
	if (tcfdata.acad_level && tcfdata.acad_level.length >0 ) {
		var acad_level=tcfdata.acad_level[0].code;
		if ( acad_level == 'GRDK' && college == 'MED' && args.context == "wforder" )
			retVal='KUMC Graduate Studies';
	}

	//ROTC ??
	if (tcfdata.subject && tcfdata.subject.length > 0) {
		var subject=tcfdata.subject[0].code;
		if (haveDebug) { Dump('\t subject',subject); }
		var regex = new RegExp('AIR|ARMY|NAVY|MCOR','i');
		if ( college == "OURU" && regex.test(subject) && args.context == "wforder" ) {
			retVal='ROTC';
		}
	}

	if (haveDebug) { Debug("\t Return college = >" + retVal + "<"); }
	return [inval.replace(wfrule.regex,retVal)];
};

//wfrules:isUgrad|function|GradOrUndergrad|
//wfrules:isGrad|function|GradOrUndergrad|
//==================================================================================================
// Check the course_number to determine academic level (Graduate vs Undergraduate).
// function looks at its rule name from the wfrule definition and expects the following to be true:
// 		the wfrule name is of the form 'isXXXXX' where XXXXX is the name of the screen
// 	e.g. 	wfrules:isUgrad|function|GradOrUndergrad|
//			wfrules:isGrad|function|GradOrUndergrad|
//	'ugrad' and 'grad' are assumed to be the screen names.
// function then pulls the condition from the screen and evaluates that against course_number.
// 03/12/2015 - dgs - new -- bryant
//==================================================================================================
wffuncs.GradOrUndergrad = function(inval, wfrule, args) {
	var myName=wfrule.attrname;
	var haveDebug=false; var haveDump=false; if (typeof(Dump) == "function") haveDump=true; if (typeof(Debug) == "function") haveDebug=true;
	if (haveDebug) Debug('\n*** In ' + myName + ' ***');
	//if (haveDump)  { Dump('\tinval',inval); Dump('\twfrule',wfrule.toSource()); Dump('\targs',args.toSource()); }

	// Check environment, do we have enough data to run
	if (!tcfdata.course_number || !tcfdata.course_number.length)
		return false;
	var course_number=tcfdata.course_number;
	if (haveDebug) { Dump('\t course_number',course_number); }

	// Find out what academic level we are running (graduate vs undergraduate, see above
	var searchForScreen=wfrule.searchfor.replace('is','').toLowerCase();
	if (haveDebug) { Dump('\t searchForScreen',searchForScreen); }

	//Loop through screens lopoking for one that matches the rule that we want to run
	var condition='';
	for (var i=0,  tot=tcfdata.screens.length; i < tot; i++) {
		screen = tcfdata.screens[i];
		if (screen.name == searchForScreen) {
			condition=screen.condition;
			break;
		}
	}

	// If we found the screen then parse the condition attribute of the screen to
	// pull off the rule condition
	var bool=false;
	if (condition !== '') {
		if (haveDebug) { Dump('\t condition',condition); }
		if (condition.indexOf("/") > 0) {
			// is a regular expressioin
			condition = condition.substring(condition.indexOf("/"),condition.length);
			re = new RegExp(condition,"i");
			bool = re.test(course_number.toString());
		} else {
			// is a normal conditional
			bool = eval(condition); // jshint ignore:line
		}
		if (haveDebug) { Dump('\t Condition test was ',bool); }
	} else {
		print_debug("\n*Error* -- " + myName + "Could not find a screen definition for: '" + searchForScreen + "'\n\n");
		return false;
	}

	// If true we match the rule
	if (bool) {
		return [inval.replace(wfrule.regex,col)];
	} else {
		return false;
	}
};

//==================================================================================================
// Determin if the proposal is graduate, special rules for college=BUS
// 02/26/2015 - dgs - new -- ku
//==================================================================================================
wffuncs.IsGraduate = function(inval, wfrule, args) {
	var myName=wfrule.attrname;
	var haveDebug=false; var haveDump=false; if (typeof(Dump) == "function") haveDump=true; if (typeof(Debug) == "function") haveDebug=true;
	if (haveDebug) Debug('\n*** In ' + myName + ' ***');
	//if (haveDump)  { Dump('\tinval',inval); Dump('\twfrule',wfrule.toSource()); Dump('\targs',args.toSource()); }

	if(args && args.context && args.context != "wfrule")
		return false;

	if (!tcfdata.course_number || !tcfdata.course_number.length)
		return false;
	//courseNum=parseInt(tcfdata.course_number);
	courseNum=tcfdata.course_number.toString();
	if (haveDebug) { Dump('\t courseNum',courseNum); }

	// If college is BUS then Graduate is >= 700 and <= 899
	var regex;
	if (tcfdata.college && tcfdata.college.length) {
		var college=tcfdata.college[0].code;
		if (haveDebug) { Dump('\t college',college); }
		if (college == 'BUS' ) {
			regex = /^\D*[7-8]\d{2}\D*$/i;
			if (courseNum.match(regex)) {
				if (haveDebug) { Debug("\t College is BUS course number between 700 and 899, return Graduate"); }
				return [inval.replace(wfrule.ifregex,'')];
			} else {
				return false;
			}
		}
	}

	// Otherwise Graduate is >= 700
	//var regex = new RegExp('^\D*[7-9]\d{2}\D*$','i');
	regex = /^\D*[7-9]\d{2}\D*$/i;
	if (courseNum.match(regex)) {
		if (haveDebug) { Debug("\t College is not BUS course number >= 700 and 899, return Graduate"); }
		return [inval.replace(wfrule.ifregex,'')];
	}

	// default is false
	if (haveDebug) { Debug("\t Is not Graduate"); }
	return false;
};


//==================================================================================================
// TRUE if college = 'AHLTH' and acad_level.code=' GRDL'  -AND- subj.code in {'SPLH','AUD'}
// 02/26/2015 - dgs - new -- ku
//==================================================================================================
wffuncs.IsAUDSPLH = function(inval, wfrule, args) {
	var myName=wfrule.attrname;
	var haveDebug=false; var haveDump=false; if (typeof(Dump) == "function") haveDump=true; if (typeof(Debug) == "function") haveDebug=true;
	if (haveDebug) Debug('\n*** In ' + myName + ' ***');
	//if (haveDump)  { Dump('\tinval',inval); Dump('\twfrule',wfrule.toSource()); Dump('\targs',args.toSource()); }

	// Check environment, do we have enough data to run
	if(args && args.context && args.context != "wfrule")
		return false;
	if (!tcfdata.acad_level || !tcfdata.acad_level.length)
		return false;
	var acad_level=tcfdata.acad_level[0].code;

	if (!tcfdata.college || !tcfdata.college.length)
		return false;
	var college=tcfdata.college[0].code;

	if (!tcfdata.subject || !tcfdata.subject.length)
		return false;
	var subject=tcfdata.subject[0].code;

	if (haveDebug) { Dump('\t acad_level',acad_level); Dump('\t college',college); Dump('\t subject',subject); }

	// Main
	if (college != "AHLTH")
		return false;
	var regex = new RegExp('SPLH|AUD','i');
	if (regex.test(subject)) {
		if (haveDebug) { Debug("\t Conditions met, adding step"); }
		return [inval.replace(wfrule.ifregex,'')];
	}

	// default is false
	return false;
};


//==================================================================================================
// returns GR or UG based on acad_level
// 02/26/2015 - dgs - new -- ku
//==================================================================================================
wffuncs.AcadLevel = function(inval, wfrule, args) {
	var myName=wfrule.attrname;
	var haveDebug=false; var haveDump=false; if (typeof(Dump) == "function") haveDump=true; if (typeof(Debug) == "function") haveDebug=true;
	if (haveDebug) Debug('\n*** In ' + myName + ' ***');
	//if (haveDump)  { Dump('\tinval',inval); Dump('\twfrule',wfrule.toSource()); Dump('\targs',args.toSource()); }

	// Check environment, do we have enough data to run
	if(args && args.context && args.context != "wfrule")
		return false;
	if (!tcfdata.course_number || !tcfdata.course_number.length)
		return false;

	courseNum=parseInt(tcfdata.course_number);
	if (haveDebug) { Dump('\t courseNum',courseNum); }

	// Otherwise Graduate is >= 700
	var retVal='UG';
	if (courseNum >= 700)
		retVal='GR';

	if (haveDebug) { Debug("\t Returning: " + retVal); }
	return [inval.replace(wfrule.regex,retVal)];
};


//==================================================================================================
// Adds the proposal department followed by the other EDUC depts -- Chairs {C&T, ELPS, HSES, EPSY, SPED}
// 02/26/2015 - dgs - new -- ku
//==================================================================================================
wffuncs.AdditionalSubjChairs = function(inval, wfrule, args) {
	var myName=wfrule.attrname;
	var haveDebug=false; var haveDump=false; if (typeof(Dump) == "function") haveDump=true; if (typeof(Debug) == "function") haveDebug=true;
	if (haveDebug) Debug('\n*** In ' + myName + ' ***');
	//if (haveDump)  { Dump('\tinval',inval); Dump('\twfrule',wfrule.toSource()); Dump('\targs',args.toSource()); }

	// Check environment, do we have enough data to run
	if(args && args.context && args.context != "wfrule")
		return false;
	if (!tcfdata.college || !tcfdata.college.length)
		return false;
	if (!tcfdata.department || !tcfdata.department.length)
		return false;

	// Main
	var college=tcfdata.college[0].code;
	var department=tcfdata.department[0].code;
	if (haveDebug) { Dump('\t college',college); Dump('\t department',department); }
	if (college != "EDUC")
		return false;

	var depts=['C&T','ELPS','EPSY','HSES','SPED'];
	var retArray=[];
	depts.forEach(function(dept) {
		if ( dept != department )
			retArray.push(inval.replace(wfrule.regex,dept));
	});

	if (haveDebug) { retArray.forEach(function(text) { Dump("\t Return val",text); }); }
	return retArray;
};


//==================================================================================================
// Add Related departments from the course eco system data
// 02-23-15 - dgs - Updated to pull step names from cimconfig
// 					Updated to call AddAdditionalNotifies function if definded
//==================================================================================================
wffuncs.Related = function(inval,wfrule,args){
	var myName=wfrule.attrname;
	var haveDebug=false; var haveDump=false; if (typeof(Dump) == "function") haveDump=true; if (typeof(Debug) == "function") haveDebug=true;
	if (haveDebug) Debug('\n*** In ' + myName + ' ***');
	//if (haveDump)  { Dump('\tinval',inval); Dump('\twfrule',wfrule.toSource()); Dump('\targs',args.toSource()); }

	// Check environment & necessary variables
	if(args && args.context && args.context != "wfrule")
		return false;

	if(!tcfdata.code || !tcfdata.code.length)
		return false;
	if(!tcfdata.department || !tcfdata.department.length)
		return false;
	if(!tcfdata.college || !tcfdata.college.length)
		return false;

	// Determin mode (dept / college) based on the mapped name
	var mode="dept";
	var reqType=wfrule.searchfor.toLowerCase();
	var regex = new RegExp('college|division|director','i');
	if (regex.test(reqType))
		mode="college";
	if (haveDebug) { Dump('\t mode',mode); }

	// Main
	var parentCode = tcfdata.code[0];
	var parentDept = tcfdata.department[0].code;
	var parentCollege = tcfdata.college[0].code;
	if (haveDebug) { Dump('\t parentCode',parentCode); Dump('\t parentDept',parentDept); Dump('\t parentCollege',parentCollege); }

	// Get referenced subject codes (dept) from courseref
	var sqlStmt="SELECT DISTINCT dept FROM courseref WHERE code = ? AND dept <> ? AND dept <> ''";
	var sqlParms=[parentCode, parentDept];
	var resultSet1=dbquery("courseref", sqlStmt,sqlParms);
	if(resultSet1.length === 0) {
		print_debug("\t*Error* -- No results looking up related subject codes:" + '\n\t\tsqlStmt: ' + sqlStmt + '\n\t\tsqlPars: ' + sqlParms + '\n\t\t' + dbexec(tcfdata.dbname[0],"DBERRORMSG") + "\n");
		return false;
	}
	if (haveDebug) { Dump('resultSet1',resultSet1.toSource()); }

	// Loop through the returned departments (subject codes) and lookup the owning depts from cimlookup
	var depts=[], cols=[];
	resultSet1.forEach(function(result1) {
		if (haveDebug) { Dump('\tDept/Subj from courseref',result1.dept); }
		var sqlStmt="SELECT department,college FROM cimlookup WHERE subject = ? and department <> ?";
		var sqlParms=[result1.dept,parentDept];
		var resultSet2=dbquery("cimcourses",sqlStmt,sqlParms);
		if(resultSet2.length === 0){
			print_debug("\t*Error* -- No looking up related departments:" + '\n\t\tsqlStmt: ' + sqlStmt + '\n\t\tsqlPars: ' + sqlParms + '\n\t\t' + dbexec(tcfdata.dbname[0],"DBERRORMSG") + "\n");
			return false;
		}
		resultSet2.forEach(function(result2) {
			if (haveDebug) { Dump('\t\tDept from cimlookup',result2.department); Dump('\t\tCol from cimlookup',result2.college);}
			depts.push(result2.department);
			cols.push(result2.college);
		});
	});

	// See if there is an add function to put more depts on the list
	if (typeof(AddAdditionalNotifies) == "function" ) {
		addNotify=AddAdditionalNotifies(inval, wfrule, args);
		depts=depts.concat(addNotify);
	}

	// Remove dupes from final depts array
	depts=RemoveDupes(depts);
	cols=RemoveDupes(cols);

	// generate output array
	var retArray=[];
	if (mode == 'dept') {
		depts.forEach(function(dept) {
			if (haveDebug) { Dump('\tReturn related dept',dept); }
			retArray.push(inval.replace(wfrule.regex,dept));
		});
	} else {
		cols.forEach(function(col) {
			if (haveDebug) { Dump('\tReturn related col',col); }
			retArray.push(inval.replace(wfrule.regex,col));
		});
	}

	if(!retArray || !retArray.length)
		return false;
	return retArray;
};


//==================================================================================================
// Import workflow helper functions -- in ./courseadmin/workflowHelperFunctions.atj
//==================================================================================================
//print_debug("\nLoading /courseadmin/workflowHelperFunctions.atj \n\n")
/* jshint ignore:start */
%import /courseadmin/workflowHelperFunctions.atj:atj% // jshint ignore:line
/* jshint ignore:end */
